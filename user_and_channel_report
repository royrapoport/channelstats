#! /usr/bin/env python3

import argparse
import json
import sys
import traceback

import channel
import config
import report_utils
import slacker
import slack_token
import slack_user_report
import slack_channel_report
import report_generator
import report_targets

parser = argparse.ArgumentParser(description="Send user and channel reports")
parser.add_argument("--override", help="Specify @username or #channel to send all reports to")
parser.add_argument("--regen", action="store_true", help="Force regeneration of reports")
parser.add_argument("--nochannel", action="store_true", help="Do not send channel activity reports")
parser.add_argument("--nouser", action="store_true", help="Do not send user activity reports")
parser.add_argument("--user", help="Send user report for just this @user")
parser.add_argument("--channel", help="Send channel report for just this #channel")
parser.add_argument("--nosend", action="store_true", help="Do all processing but don't actually send out any reports")

args = parser.parse_args()
override = None
if args.override:
    override = report_utils.override(args.override)

rg = report_generator.ReportGenerator()
slack_user_reporter = slack_user_report.SlackUserReport()
slack_channel_reporter = slack_channel_report.SlackChannelReport()
cobj = channel.Channel()
sobj = slacker.Slacker(config.slack_name, slack_token.token)

users = report_targets.users()
channel_dict = report_targets.channels()
channels = channel_dict.keys()

last_week = rg.latest_week_start()
days = 7

if args.user and args.channel:
    print("Sorry, you can't specify both --user and --channel")
    sys.exit(0)

if args.user:
    users = [report_utils.override(args.user)]
    args.nochannel = True
elif args.channel:
    channels = [report_utils.override(args.channel)]
    args.nouser = True

print("users: {}".format(users))
print("channels: {}".format(channels))
print("Week start: {}".format(last_week))
print("Getting report for {}/{}".format(last_week, days))
(report, previous_report) = rg.report(last_week, days, users=users, channels=channels, force_generate=args.regen)
f = open("reports/{}-{}days-report.json".format(last_week, days), "w")
f.write(json.dumps(report, indent=4))
f.close()
if not args.nouser:
    for user in users:
        user_destination = override or user
        if not args.nosend:
            print("Sending user reports")
            try:
                slack_user_reporter.send_report(user, report, previous_report, send=True, override_uid=user_destination)
            except Exception as ex:
                print("Failed to send a report to {}: {} {}".format(user, ex, sys.exc_info()[0]))
                traceback.print_exc()

topic = "Channel for automated postings of channel stats for the #{} channel.  Feedback/questions to #rls-statistics-tech"

if not args.nochannel:
    for channel in channels:
        dest = channel_dict[channel]
        name = cobj.get(channel)['name']
        nt = topic.format(name)
        channel_destination = override or dest
        print("For channel {}, will send to {}".format(name, channel_destination))
        try:
            sobj.conditional_set_topic(dest, nt, leave=True)
        except Exception as ex:
            print("Failed to set topic on {}/{}: {} {}".format(channel, name, ex, sys.exc_info()[0]))
            traceback.print_exc()
        if not args.nosend:
            print("Sending channel report for {}".format(name))
            try:
                slack_channel_reporter.send_report(channel, report, previous_report, send=True, override_cid=channel_destination, summary=True)
            except Exception as ex:
                print("Failed to send report to {}/{}: {} {}".format(channel, name, ex, sys.exc_info()[0]))
                traceback.print_exc()
